apiVersion: v1
kind: Template
labels:
  template: grpc-demo
metadata:
  annotations:
    description: A group of interconnected GRPC demo services written in Go.
    iconClass: icon-go-gopher
    openshift.io/display-name: Interconnected GRPC demo services
    openshift.io/documentation-url: https://github.com/drhelius/grpc-demo
    openshift.io/provider-display-name: Ignacio SÃ¡nchez
    openshift.io/support-url: https://twitter.com/drhelius
    tags: grpc,demo
  labels:
    template: grpc-demo
  name: grpc-demo
objects:

- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
      app.openshift.io/connects-to: user,order
      app.openshift.io/vcs-uri: https://github.com/drhelius/grpc-demo-account
      app.openshift.io/vcs-ref: ${ACCOUNT_VERSION}
    labels:
      app: account
      version: ${ACCOUNT_VERSION}
      app.kubernetes.io/name: account
      app.kubernetes.io/version: ${ACCOUNT_VERSION}
      app.kubernetes.io/component: service
      app.kubernetes.io/part-of: ${APP_NAME}
      app.openshift.io/runtime: golang
    name: account
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      deploymentconfig: account
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          deploymentconfig: account
      spec:
        containers:
        - image: ${ACCOUNT_IMAGE}:${ACCOUNT_VERSION}
          imagePullPolicy: Always
          name: account
          ports:
          - containerPort: 5000
            protocol: TCP
          - containerPort: 8080
            protocol: TCP
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    triggers:
    - type: ConfigChange

- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
      app.openshift.io/connects-to: product
      app.openshift.io/vcs-uri: https://github.com/drhelius/grpc-demo-order
      app.openshift.io/vcs-ref: ${ORDER_VERSION}
    labels:
      app: order
      version: ${ORDER_VERSION}
      app.kubernetes.io/name: order
      app.kubernetes.io/version: ${ORDER_VERSION}
      app.kubernetes.io/component: service
      app.kubernetes.io/part-of: ${APP_NAME}
      app.openshift.io/runtime: golang
    name: order
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      deploymentconfig: order
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          deploymentconfig: order
      spec:
        containers:
        - image: ${ORDER_IMAGE}:${ORDER_VERSION}
          imagePullPolicy: Always
          name: order
          ports:
          - containerPort: 5000
            protocol: TCP
          - containerPort: 8080
            protocol: TCP
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    triggers:
    - type: ConfigChange

- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
      app.openshift.io/vcs-uri: https://github.com/drhelius/grpc-demo-product
      app.openshift.io/vcs-ref: ${PRODUCT_VERSION}
    labels:
      app: product
      version: ${PRODUCT_VERSION}
      app.kubernetes.io/name: product
      app.kubernetes.io/version: ${PRODUCT_VERSION}
      app.kubernetes.io/component: service
      app.kubernetes.io/part-of: ${APP_NAME}
      app.openshift.io/runtime: golang
    name: product
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      deploymentconfig: product
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          deploymentconfig: product
      spec:
        containers:
        - image: ${PRODUCT_IMAGE}:${PRODUCT_VERSION}
          imagePullPolicy: Always
          name: product
          ports:
          - containerPort: 5000
            protocol: TCP
          - containerPort: 8080
            protocol: TCP
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    triggers:
    - type: ConfigChange

- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
      app.openshift.io/vcs-uri: https://github.com/drhelius/grpc-demo-user
      app.openshift.io/vcs-ref: ${USER_VERSION}
    labels:
      app: user
      version: ${USER_VERSION}
      app.kubernetes.io/name: user
      app.kubernetes.io/version: ${USER_VERSION}
      app.kubernetes.io/component: service
      app.kubernetes.io/part-of: ${APP_NAME}
      app.openshift.io/runtime: golang
    name: user
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      deploymentconfig: user
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          deploymentconfig: user
      spec:
        containers:
        - image: ${USER_IMAGE}:${USER_VERSION}
          imagePullPolicy: Always
          name: user
          ports:
          - containerPort: 5000
            protocol: TCP
          - containerPort: 8080
            protocol: TCP
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    triggers:
    - type: ConfigChange

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: account
      version: ${ACCOUNT_VERSION}
      app.kubernetes.io/name: account
      app.kubernetes.io/version: ${ACCOUNT_VERSION}
      app.kubernetes.io/component: service
      app.kubernetes.io/part-of: ${APP_NAME}
    name: account
  spec:
    ports:
    - name: 5000-tcp
      port: 5000
      protocol: TCP
      targetPort: 5000
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: account

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: order
      version: ${ORDER_VERSION}
      app.kubernetes.io/name: order
      app.kubernetes.io/version: ${ORDER_VERSION}
      app.kubernetes.io/component: service
      app.kubernetes.io/part-of: ${APP_NAME}
    name: order
  spec:
    ports:
    - name: 5000-tcp
      port: 5000
      protocol: TCP
      targetPort: 5000
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: order

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: product
      version: ${PRODUCT_VERSION}
      app.kubernetes.io/name: product
      app.kubernetes.io/version: ${PRODUCT_VERSION}
      app.kubernetes.io/component: service
      app.kubernetes.io/part-of: ${APP_NAME}
    name: product
  spec:
    ports:
    - name: 5000-tcp
      port: 5000
      protocol: TCP
      targetPort: 5000
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: product

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: user
      version: ${USER_VERSION}
      app.kubernetes.io/name: user
      app.kubernetes.io/version: ${USER_VERSION}
      app.kubernetes.io/component: service
      app.kubernetes.io/part-of: ${APP_NAME}
    name: user
  spec:
    ports:
    - name: 5000-tcp
      port: 5000
      protocol: TCP
      targetPort: 5000
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: user

- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: account
      version: ${ACCOUNT_VERSION}
      app.kubernetes.io/name: account
      app.kubernetes.io/version: ${ACCOUNT_VERSION}
      app.kubernetes.io/component: service
      app.kubernetes.io/part-of: ${APP_NAME}
    name: account
  spec:
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: account
      weight: 100

- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: order
      version: ${ORDER_VERSION}
      app.kubernetes.io/name: order
      app.kubernetes.io/version: ${ORDER_VERSION}
      app.kubernetes.io/component: service
      app.kubernetes.io/part-of: ${APP_NAME}
    name: order
  spec:
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: order
      weight: 100

- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: product
      version: ${PRODUCT_VERSION}
      app.kubernetes.io/name: product
      app.kubernetes.io/version: ${PRODUCT_VERSION}
      app.kubernetes.io/component: service
      app.kubernetes.io/part-of: ${APP_NAME}
    name: product
  spec:
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: product
      weight: 100

- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: user
      version: ${USER_VERSION}
      app.kubernetes.io/name: user
      app.kubernetes.io/version: ${USER_VERSION}
      app.kubernetes.io/component: service
      app.kubernetes.io/part-of: ${APP_NAME}
    name: user
  spec:
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: user
      weight: 100

parameters:
- description: Sets the Application name.
  name: APP_NAME
  displayName: Application name
  value: grpc-demo
- description: Sets the Account Service image.
  name: ACCOUNT_IMAGE
  displayName: Account Service image
  value: quay.io/isanchez/grpc-demo-account
- description: Sets the Account Service version.
  name: ACCOUNT_VERSION
  displayName: Account Service version
  value: v1.0.0
- description: Specifies how many instances of the Account Service to create in the cluster.
  name: ACCOUNT_REPLICAS
  displayName: Account Service replicas
  value: "1"
- description: Sets the Order Service image.
  name: ORDER_IMAGE
  displayName: Order Service image
  value: quay.io/isanchez/grpc-demo-order
- description: Sets the Order Service version.
  name: ORDER_VERSION
  displayName: Order Service version
  value: v1.0.0
- description: Specifies how many instances of the Order Service to create in the cluster.
  name: ORDER_REPLICAS
  displayName: Order Service replicas
  value: "1"
- description: Sets the Product Service image.
  name: PRODUCT_IMAGE
  displayName: Product Service image
  value: quay.io/isanchez/grpc-demo-product
- description: Sets the Product Service version.
  name: PRODUCT_VERSION
  displayName: Product Service version
  value: v1.0.0
- description: Specifies how many instances of the Product Service to create in the cluster.
  name: PRODUCT_REPLICAS
  displayName: Product Service replicas
  value: "1"
- description: Sets the User Service image.
  name: USER_IMAGE
  displayName: User Service image
  value: quay.io/isanchez/grpc-demo-user
- description: Sets the User Service version.
  name: USER_VERSION
  displayName: User Service version
  value: v1.0.0
- description: Specifies how many instances of the User Service to create in the cluster.
  name: USER_REPLICAS
  displayName: User Service replicas
  value: "1"
